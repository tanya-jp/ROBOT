// Generated by gencpp from file sen_one/co.msg
// DO NOT EDIT!


#ifndef SEN_ONE_MESSAGE_CO_H
#define SEN_ONE_MESSAGE_CO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sen_one
{
template <class ContainerAllocator>
struct co_
{
  typedef co_<ContainerAllocator> Type;

  co_()
    : obstacle_name()
    , distance(0.0)  {
    }
  co_(const ContainerAllocator& _alloc)
    : obstacle_name(_alloc)
    , distance(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _obstacle_name_type;
  _obstacle_name_type obstacle_name;

   typedef double _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::sen_one::co_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sen_one::co_<ContainerAllocator> const> ConstPtr;

}; // struct co_

typedef ::sen_one::co_<std::allocator<void> > co;

typedef boost::shared_ptr< ::sen_one::co > coPtr;
typedef boost::shared_ptr< ::sen_one::co const> coConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sen_one::co_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sen_one::co_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sen_one::co_<ContainerAllocator1> & lhs, const ::sen_one::co_<ContainerAllocator2> & rhs)
{
  return lhs.obstacle_name == rhs.obstacle_name &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sen_one::co_<ContainerAllocator1> & lhs, const ::sen_one::co_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sen_one

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sen_one::co_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sen_one::co_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sen_one::co_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sen_one::co_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sen_one::co_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sen_one::co_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sen_one::co_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b05b4c16a6352b88b1c0cbe7799fe887";
  }

  static const char* value(const ::sen_one::co_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb05b4c16a6352b88ULL;
  static const uint64_t static_value2 = 0xb1c0cbe7799fe887ULL;
};

template<class ContainerAllocator>
struct DataType< ::sen_one::co_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sen_one/co";
  }

  static const char* value(const ::sen_one::co_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sen_one::co_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string obstacle_name\n"
"float64 distance\n"
;
  }

  static const char* value(const ::sen_one::co_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sen_one::co_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obstacle_name);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct co_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sen_one::co_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sen_one::co_<ContainerAllocator>& v)
  {
    s << indent << "obstacle_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.obstacle_name);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEN_ONE_MESSAGE_CO_H
